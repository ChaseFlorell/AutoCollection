//--------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------------------------
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Example
{
	public partial class DemoClass : IList<Foo>
	{
		public DemoClass(IEnumerable<Foo> items) =>
			_items = items?.ToList() ?? throw new System.ArgumentNullException(nameof(items));

		/// <inheritdoc cref="IList{T}" />
		public IEnumerator<Foo> GetEnumerator() => _items.GetEnumerator();

		/// <inheritdoc cref="IList{T}"  />
		IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

		/// <inheritdoc  cref="IList{T}" />
		public void Add(Foo item) => _items.Add(item);

		/// <inheritdoc cref="IList{T}" />
		public void Clear() => _items.Clear();

		/// <inheritdoc  cref="IList{T}" />
		public bool Contains(Foo item) => _items.Contains(item);

		/// <inheritdoc  cref="IList{T}" />
		public void CopyTo(Foo[] array, int arrayIndex) => _items.CopyTo(array, arrayIndex);

		/// <inheritdoc  cref="IList{T}" />
		public bool Remove(Foo item) => _items.Remove(item);

		/// <inheritdoc  cref="IList{T}" />
		public int Count => _items.Count;

		/// <inheritdoc  cref="IList{T}" />
		public bool IsReadOnly => _items.IsReadOnly;

		/// <inheritdoc cref="IList{T}" />
		public int IndexOf(Foo item) => _items.IndexOf(item);

		/// <inheritdoc cref="IList{T}" />
		public void Insert(int index, Foo item) => _items.Insert(index, item);

		/// <inheritdoc cref="IList{T}" />
		public void RemoveAt(int index) => _items.RemoveAt(index);

		/// <inheritdoc cref="IList{T}" />
		public Foo this[int index]
		{
			get => _items[index];
			set => _items[index] = value;
		}

		private readonly IList<Foo> _items;
	}
}